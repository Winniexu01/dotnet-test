# Pipeline documentation at https://github.com/dotnet/dotnet/blob/main/docs/license-scanning.md

pr: none

parameters:
# Provides a way to scan a specific repo. If not provided, all repos of the VMR will be scanned.
- name: specificRepoName
  type: string
  displayName: "Specific repo name to scan (e.g. runtime, sdk). If empty, scans all repos of the VMR."
  default: " " # Set it to an empty string to allow it be an optional parameter

stages:
- stage: stage
  jobs:
  - job: Setup
    steps:
    - script: |
        set -x
        vmrSrcDir="$(Build.SourcesDirectory)/src"
        # Builds an Azure DevOps matrix definition. Each entry in the matrix is a path,
        # allowing a job to be run for each src repo.
        matrix=""
        count=0

        # Trim leading/trailing spaces from the repo name
        if [[ "${{ parameters.specificRepoName }}" == " " ]]; then
          repo=" "
        else
          repo=${{ parameters.specificRepoName }}
        fi

        specificRepoName=$(echo "$repo" | awk '{$1=$1};1')

        # If the repo name is provided, only scan that repo.
        if [ ! -z "$specificRepoName" ]; then
          matrix="\"$specificRepoName\": { \"repoPath\": \"$vmrSrcDir/$specificRepoName\" }"
        else
          for dir in $vmrSrcDir/*/
          do
            if [ ! -z "$matrix" ]; then
              matrix="$matrix,"
            fi
            repoName=$(basename $dir)
            matrix="$matrix \"$repoName\": { \"repoPath\": \"$dir\" }"
            if [ "$count" != "100" ]; then
                count=$((count+1))
            else
                break
            fi
          done
        fi

        matrix="{ $matrix }"

        echo "##vso[task.setvariable variable=matrix;isOutput=true]$matrix"
      name: GetMatrix
      displayName: Get Matrix

  # - job: LicenseScan
  #   dependsOn: Setup
  #   pool:
  #     vmImage: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net10.0-source-build-test-amd64
  #     options: '--memory=6g'
  #   timeoutInMinutes: 420
  #   strategy:
  #     matrix: $[ dependencies.Setup.outputs['GetMatrix.matrix'] ]
  #   steps:

  #   - script: >
  #       dotnet test
  #       $(Build.SourcesDirectory)/test/Microsoft.DotNet.SourceBuild.Tests/Microsoft.DotNet.SourceBuild.Tests.csproj
  #       --filter "FullyQualifiedName=Microsoft.DotNet.SourceBuild.Tests.LicenseScanTests.ScanForLicenses"
  #       --logger:'trx;LogFileName=$(Agent.JobName)_LicenseScan.trx'
  #       --logger:'console;verbosity=detailed'
  #       -c Release
  #       -bl:$(Build.SourcesDirectory)/artifacts/log/Debug/BuildTests_$(date +"%m%d%H%M%S").binlog
  #       -flp:LogFile=$(Build.SourcesDirectory)/artifacts/logs/BuildTests_$(date +"%m%d%H%M%S").log
  #       -clp:v=m
  #       /p:SourceBuildTestsLicenseScanPath=$(repoPath)
  #       /p:TargetRid=linux-x64
  #       /p:PortableRid=linux-x64
  #       /p:SkipPrepareSdkArchive=true
  #     displayName: Run Tests
  #     workingDirectory: $(Build.SourcesDirectory)

  #   - script: |
  #       set -x
  #       targetFolder=$(Build.StagingDirectory)/BuildLogs/
  #       mkdir -p ${targetFolder}
  #       cd "$(Build.SourcesDirectory)"
  #       find artifacts/log/ -type f -name "BuildTests*.binlog" -exec cp {} --parents -t ${targetFolder} \;
  #       find artifacts/log/ -type f -name "BuildTests*.log" -exec cp {} --parents -t ${targetFolder} \;
  #       find artifacts/TestResults/ -type f -name "*.binlog" -exec cp {} --parents -t ${targetFolder} \;
  #       find artifacts/TestResults/ -type f -name "*.log" -exec cp {} --parents -t ${targetFolder} \;
  #       echo "Updated:"
  #       find artifacts/TestResults/ -type f -name "UpdatedLicenseExclusions*.txt"
  #       find artifacts/TestResults/ -type f -name "UpdatedLicenseExclusions*.txt" -exec cp {} --parents -t ${targetFolder} \;
  #       find artifacts/TestResults/ -type f -name "Updated*.json"
  #       find artifacts/TestResults/ -type f -name "Updated*.json" -exec cp {} --parents -t ${targetFolder} \;
  #       echo "Results:"
  #       find artifacts/TestResults/ -type f -name "scancode-results*.json" -exec cp {} --parents -t ${targetFolder} \;
  #       echo "All:"
  #       ls -R artifacts/TestResults/
  #       echo "BuildLogs:"
  #       ls -R ${targetFolder}
  #     displayName: Prepare BuildLogs staging directory
  #     continueOnError: true
  #     condition: succeededOrFailed()

  #   - task: PublishPipelineArtifact@1
  #     displayName: 'Publish BuildLogs'
  #     condition: succeededOrFailed()
  #     inputs:
  #       targetPath: '$(Build.StagingDirectory)/BuildLogs'
  #       artifactName: $(Agent.JobName)_BuildLogs_Attempt$(System.JobAttempt)

  #   - task: PublishTestResults@2
  #     displayName: Publish Test Results
  #     condition: succeededOrFailed()
  #     continueOnError: true
  #     inputs:
  #       testRunner: vSTest
  #       testResultsFiles: '**/*.trx'
  #       searchFolder: $(Build.SourcesDirectory)/artifacts/TestResults
  #       mergeTestResults: true
  #       publishRunAttachments: true
  #       testRunTitle: $(Agent.JobName)

  - job: Publish_Test_Results_PR
    # strategy:
    #   matrix: $[ dependencies.Setup.outputs['GetMatrix.matrix'] ]
    dependsOn: 
      - Setup
      # - LicenseScan
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/dotnet-main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'))
    variables:
    - template: /eng/pipelines/templates/variables/pipelines.yml@self
    - name: matrixs
      value: $[ dependencies.Setup.outputs['GetMatrix.matrix'] ]
    steps:
    - script: |
        mm=$(echo "$matrixs" | tr -d '"' | grep -oP '\b\w+(?=: { repoPath:)')
        echo $mm
      displayName: Get Matrix
      workingDirectory: $(Build.SourcesDirectory)

    # - script: |
    #     set -x
    #     echo $(SOURCE_BUILD_LICENSE_SCAN_PIPELINE_ID)
    #     source ./eng/common/tools.sh
    #     InitializeDotNetCli true
    #   displayName: Install .NET SDK
    #   workingDirectory: $(Build.SourcesDirectory)

    # - template: /eng/pipelines/templates/steps/download-pipeline-artifact.yml@self
    #   parameters:
    #     pipeline: $(SOURCE_BUILD_LICENSE_SCAN_PIPELINE_ID)
    #     buildId: $(Build.BuildId)
    #     artifact: ''
    #     patterns: '**/Updated*'
    #     displayName: Download Updated Test Files

    # - template: /eng/pipelines/templates/steps/download-pipeline-artifact.yml@self
    #   parameters:
    #     pipeline: $(SOURCE_BUILD_LICENSE_SCAN_PIPELINE_ID)
    #     buildId: $(Build.BuildId)
    #     artifact: ''
    #     patterns: '**/scancode-results*'
    #     displayName: Download Scancode Results Files

    # - script: |
    #     find $(Pipeline.Workspace)/Artifacts -type f -exec mv {} $(Pipeline.Workspace)/Artifacts \;
    #   displayName: Move Artifacts to root

    # - script: |
    #     set -x
    #     find $(Pipeline.Workspace)/Artifacts -type f
    #   displayName: List files

    # - template: /eng/pipelines/templates/steps/create-baseline-update-pr.yml@self
    #   parameters:
    #     pipeline: license
    #     repo: Winniexu01/dotnet-test
    #     originalFilesDirectory: test/Microsoft.DotNet.SourceBuild.Tests/assets/LicenseScanTests
    #     updatedFilesDirectory: $(Pipeline.Workspace)/Artifacts
    #     pullRequestTitle: Update Source-Build License Scan Baselines and Exclusions