parameters:
- name: stage
  type: stage

- name: job
  type: job

- name: sdl
  type: object

- name: pool
  type: object

- name: internalConfig
  type: object

- name: isOfficial
  type: boolean

- name: settings
  type: object

- name: predefinedOneESPTVariables
  type: object

- name: skipAutoInjectedTasksVariables
  type: object

- name: bypassDisallowedPoolsCheck
  type: boolean

- name: bypassDisallowedPoolsCompileTimeCheck
  type: boolean

- name: disableUserProvidedDestinationPath
  type: boolean

- name: authenticatedContainerRegistries
  type: object
  default: null

- name: featureFlags
  type: object

- name: pipelineSdl
  type: object

- name: spokeEsEnforcedSdl
  type: object

- name: container
  type: object
  default: {}

- name: enableReleaseGating
  type: boolean

jobs:
# Validation for the the presence of isProduction classification
- ${{ if and(not(parameters.job.templateContext.isProduction), not(parameters.stage.templateContext.isProduction)) }}:
  - "A release job has to be classified using job.templateContext.isProduction flag": error

- ${{ if and(eq(parameters.stage.templateContext.isProduction, false), eq(parameters.job.templateContext.isProduction, true)) }}:
  - "A non-production stage (with stage.templateContext.isProduction: false) is not allowed to have a production release job (with job.templateContext.isProduction: true)": error

# Validation for ensuring production jobs do not extend unofficial template
- ${{ elseif and(eq(parameters.job.templateContext.isProduction, 'true'), not(parameters.isOfficial)) }}:
  - "A non-production pipeline (extending 1ES.Unofficial.PipelineTemplate.yml template) is not allowed to have a production release job (with job.templateContext.isProduction: true)": error

- ${{ if parameters.job.templateContext.outputs }}:
  - "A release job cannot have outputs": error

- ${{ each pair in parameters.job }}:
    ${{ if notIn(pair.key, 'templateContext', 'variables', 'steps', 'pool', 'container') }}:
      # We don't want to include strategy if this is a deployment job, otherwise we want to just include it as it is
      ${{ if not(and(eq(pair.key, 'strategy'), parameters.job.deployment)) }}:
        ${{ pair.key }}: ${{ pair.value }}

  # Insert the pool specification if the pool property was specified at the job level
  # We need to handle the case when the value is just a string with the pool name and
  # when it is an object. In case of object, we want to process some properties (such as
  # 'image' separately). We also need to take care of cases when additional demands are specified
  ${{ if parameters.job.pool }}:
    ${{ if startsWith(convertToJson(parameters.job.pool), '{') }}:
      ${{ if and(containsValue(parameters.internalConfig.disallowedPools, parameters.job.pool.name), not(parameters.bypassDisallowedPoolsCompileTimeCheck)) }}:
        'Pool "${{ parameters.job.pool.name }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool:
        ${{ each pair in parameters.job.pool }}:
          ${{ if notIn(pair.key, 'image', 'workspace', 'demands') }}:
            ${{ pair.key }}: ${{ pair.value }}
        ${{ if and(eq(parameters.job.pool.os, 'macOS'), eq(parameters.job.pool.name, 'Azure Pipelines'), parameters.job.pool.image) }}:
          vmImage: ${{ parameters.job.pool.image }}
        ${{ elseif or(parameters.job.pool.image, parameters.job.pool.workspace) }}:
          demands:
          - ${{ if parameters.job.pool.image }}:
            - ImageOverride -equals ${{ parameters.job.pool.image }}
          - ${{ if parameters.job.pool.workspace }}:
            - ${{ if eq(parameters.job.pool.os, 'linux') }}:
              - WorkFolder -equals /mnt/${{ parameters.job.pool.workspace }}
            - ${{ else }}:
              - WorkFolder -equals C:\${{ parameters.job.pool.workspace }}
          - ${{ if and(parameters.job.pool.demands, not(startsWith(convertToJson(parameters.job.pool), '['))) }}:
            - ${{ parameters.job.pool.demands }}
          - ${{ else }}:
            - ${{ each demand in parameters.job.pool.demands }}:
              - ${{ demand }}
        ${{ elseif parameters.job.pool.demands }}:
          demands: ${{ parameters.job.pool.demands }}
    ${{ else }}:
      ${{ if and(containsValue(parameters.internalConfig.disallowedPools, parameters.job.pool), not(parameters.bypassDisallowedPoolsCompileTimeCheck)) }}:
        'Pool "${{ parameters.job.pool }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool: ${{ parameters.job.pool }}

  variables:
  - ${{ if parameters.job.variables }}:
    - ${{ each pair2 in parameters.job.variables }}:
      - ${{ if ne(pair2.key, '') }}:
        - name: ${{ pair2.key }}
          value: ${{ pair2.value }}
      - ${{ else }}:
        - ${{ insert }}: ${{ pair2 }}
  - name: OneESPT.JobType
    value: releaseJob
    readonly: true
  - ${{ parameters.predefinedOneESPTVariables }}
  # CODESYNC: Same implementation in CommonVariables.yml to create ACR variables
  - ${{ if parameters.authenticatedContainerRegistries }}:
    # Validate parameters
    - ${{ each authenticatedACR in parameters.authenticatedContainerRegistries }}:
      - ${{ if not(authenticatedACR.serviceConnection) }}:
        - ${{ if not(endsWith(authenticatedACR.registry, '.azurecr.io')) }}:
          - "Parameter authenticatedACR.registry was passed a value ('${{ authenticatedACR.registry }}') which doesn't ends with '.azurecr.io'. The parameter must include the full container registry hostname.": 'error'
    - template: ../Variables/AuthenticatedACRsInternal.yml
      parameters:
        authenticatedContainerRegistries:
        - ${{ each authenticatedACR in parameters.authenticatedContainerRegistries }}:
          - ${{ if not(authenticatedACR.serviceConnection) }}:
            - Url: ${{ authenticatedACR.registry }}
              IdentityType: ${{ authenticatedACR.identity }}
              ${{ if authenticatedACR.clientID }}:
                ClientId: ${{ authenticatedACR.clientID }}
              ${{ if in(coalesce(parameters.enforcedTenant, authenticatedACR.tenant), 'Microsoft', 'MSFT') }}:
                TenantId: 72f988bf-86f1-41af-91ab-2d7cd011db47
              ${{ elseif in(coalesce(parameters.enforcedTenant, authenticatedACR.tenant), 'AME') }}:
                TenantId: 33e01921-4d64-4f8c-a055-5bdaffd5e33d
              ${{ elseif in(coalesce(parameters.enforcedTenant, authenticatedACR.tenant), 'PME') }}:
                TenantId: 975f013f-7f24-47e8-a7d3-abc4752bf346
              ${{ elseif in(coalesce(parameters.enforcedTenant, authenticatedACR.tenant), 'Torus') }}:
                TenantId: cdc5aeea-15c5-4db6-b079-fcadd2505dc2
              ${{ else }}:
                ${{ if coalesce(parameters.enforcedTenant, authenticatedACR.tenant) }}:
                  TenantId: ${{ coalesce(parameters.enforcedTenant, authenticatedACR.tenant) }}
  - ${{ parameters.skipAutoInjectedTasksVariables}}
  # Organization-specific SBOM generation task skip variables
  - ${{ if eq(variables['System.CollectionId'], 'cdcc3dee-d62a-41ee-aded-daf587e1851b')}}:  # microsoftit
    - name: skip_sbom_generation
      value: true
  - ${{ if eq(variables['System.CollectionId'], '2ce6486e-7d3b-47bb-8e16-5f19a43015c9')}}:  # skype
    - name: SkipIc3SBOMGeneration
      value: true

  - name: OneES_targetName
    value: ${{ coalesce(parameters.container.name, 'host') }}

  ${{ if parameters.job.deployment }}:
    strategy:
      ${{ each strategyPair in parameters.job.strategy }}:
        ${{ strategyPair.key }}:
          ${{ each lifeCycleHook in parameters.internalConfig.deploymentLifeCycleHooks }}:
            ${{ if strategyPair.value[lifeCycleHook] }}:
              ${{ lifeCycleHook }}:
                steps:
                - ${{ if eq(lifeCycleHook, 'deploy') }}:
                  - download: none
                - template: ../Steps/ReleaseSteps.yml
                  parameters:
                    templateContext: ${{ parameters.job.templateContext }}
                    ${{ if strategyPair.value[lifeCycleHook].steps }}:
                      steps: ${{ strategyPair.value[lifeCycleHook].steps }}
                      hasStepDownloadNoneForDeploymentJob: ${{ and(containsValue(strategyPair.value[lifeCycleHook].steps.*.task, '30f35852-3f7e-4c0c-9a88-e127b4f97211@1'), containsValue(strategyPair.value[lifeCycleHook].steps.*.inputs.alias, 'none')) }}
                    ${{ else }}:
                      hasStepDownloadNoneForDeploymentJob: false
                    sdl: ${{ parameters.sdl }}
                    isOfficial: ${{ parameters.isOfficial }}
                    settings: ${{ parameters.settings }}
                    internalConfig: ${{ parameters.internalConfig }}
                    pool: ${{ parameters.pool }}
                    bypassDisallowedPoolsCheck: ${{ parameters.bypassDisallowedPoolsCheck }}
                    disableUserProvidedDestinationPath: ${{ parameters.disableUserProvidedDestinationPath }}
                    authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
                    featureFlags: ${{ parameters.featureFlags }}
                    pipelineSdl: ${{ parameters.pipelineSdl }}
                    spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
                    isProduction: ${{ coalesce(parameters.job.templateContext.isProduction, parameters.stage.templateContext.isProduction) }}
                    serviceTreeId: ${{ coalesce(parameters.stage.templateContext.serviceTreeId, parameters.settings.serviceTreeId) }}
                    isDeployJob: true
                    target: ${{ variables.OneES_targetName }}
                    enableReleaseGating: ${{ parameters.enableReleaseGating }}
          ${{ if strategyPair.value.on }}:
            on:
              ${{ if strategyPair.value.on.success.steps }}:
                success:
                  steps:
                  - template: ../Steps/ReleaseSteps.yml
                    parameters:
                      templateContext: ${{ parameters.job.templateContext }}
                      steps: ${{ strategyPair.value.on.success.steps }}
                      hasStepDownloadNoneForDeploymentJob: ${{ and(containsValue(strategyPair.value.on.success.steps.*.task, '30f35852-3f7e-4c0c-9a88-e127b4f97211@1'), containsValue(strategyPair.value.on.success.steps.*.inputs.alias, 'none')) }}
                      sdl: ${{ parameters.sdl }}
                      isOfficial: ${{ parameters.isOfficial }}
                      settings: ${{ parameters.settings }}
                      internalConfig: ${{ parameters.internalConfig }}
                      pool: ${{ parameters.pool }}
                      bypassDisallowedPoolsCheck: ${{ parameters.bypassDisallowedPoolsCheck }}
                      disableUserProvidedDestinationPath: ${{ parameters.disableUserProvidedDestinationPath }}
                      authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
                      featureFlags: ${{ parameters.featureFlags }}
                      pipelineSdl: ${{ parameters.pipelineSdl }}
                      spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
                      isProduction: ${{ coalesce(parameters.job.templateContext.isProduction, parameters.stage.templateContext.isProduction) }}
                      serviceTreeId: ${{ coalesce(parameters.stage.templateContext.serviceTreeId, parameters.settings.serviceTreeId) }}
                      isDeployJob: true
                      target: ${{ variables.OneES_targetName }}
                      enableReleaseGating: ${{ parameters.enableReleaseGating }}
              ${{ if strategyPair.value.on.failure.steps }}:
                failure:
                  steps:
                  - template: ../Steps/ReleaseSteps.yml
                    parameters:
                      templateContext: ${{ parameters.job.templateContext }}
                      steps: ${{ strategyPair.value.on.failure.steps }}
                      hasStepDownloadNoneForDeploymentJob: ${{ and(containsValue(strategyPair.value.on.failure.steps.*.task, '30f35852-3f7e-4c0c-9a88-e127b4f97211@1'), containsValue(strategyPair.value.on.failure.steps.*.inputs.alias, 'none')) }}
                      sdl: ${{ parameters.sdl }}
                      isOfficial: ${{ parameters.isOfficial }}
                      settings: ${{ parameters.settings }}
                      internalConfig: ${{ parameters.internalConfig }}
                      pool: ${{ parameters.pool }}
                      bypassDisallowedPoolsCheck: ${{ parameters.bypassDisallowedPoolsCheck }}
                      disableUserProvidedDestinationPath: ${{ parameters.disableUserProvidedDestinationPath }}
                      authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
                      featureFlags: ${{ parameters.featureFlags }}
                      pipelineSdl: ${{ parameters.pipelineSdl }}
                      spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
                      isProduction: ${{ coalesce(parameters.job.templateContext.isProduction, parameters.stage.templateContext.isProduction) }}
                      serviceTreeId: ${{ coalesce(parameters.stage.templateContext.serviceTreeId, parameters.settings.serviceTreeId) }}
                      isDeployJob: true
                      target: ${{ variables.OneES_targetName }}
                      enableReleaseGating: ${{ parameters.enableReleaseGating }}
  ${{ else }}:
    steps:
    - template: ../Steps/ReleaseSteps.yml
      parameters:
        templateContext: ${{ parameters.job.templateContext }}
        ${{ if parameters.job.steps }}:
          steps: ${{ parameters.job.steps }}
        sdl: ${{ parameters.sdl }}
        isOfficial: ${{ parameters.isOfficial }}
        settings: ${{ parameters.settings }}
        internalConfig: ${{ parameters.internalConfig }}
        pool: ${{ parameters.pool }}
        bypassDisallowedPoolsCheck: ${{ parameters.bypassDisallowedPoolsCheck }}
        disableUserProvidedDestinationPath: ${{ parameters.disableUserProvidedDestinationPath }}
        authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
        featureFlags: ${{ parameters.featureFlags }}
        pipelineSdl: ${{ parameters.pipelineSdl }}
        spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
        isProduction: ${{ coalesce(parameters.job.templateContext.isProduction, parameters.stage.templateContext.isProduction) }}
        serviceTreeId: ${{ coalesce(parameters.stage.templateContext.serviceTreeId, parameters.settings.serviceTreeId) }}
        isDeployJob: false
        target: ${{ variables.OneES_targetName }}
        hasStepDownloadNoneForDeploymentJob: false  # not a deployment job
        enableReleaseGating: ${{ parameters.enableReleaseGating }}
