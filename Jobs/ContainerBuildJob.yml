# Usage:
# - job: Job Name                                                                     [Required]
#   displayName: Display Name                                                         [Optional]
#   dependsOn: Dependencies                                                           [Optional]
#   pool: (only required if the default pool needs to be overridden)                  [Optional]
#     name: pool                                                                      [Optional]
#     os: windows|linux                                                               [Optional]
#   dependsOn: Dependencies                                                           [Optional]
#   templateContext:                                                                  [Required]
#     type: containerBuildJob                                                         [Required]
#     arguments:                                                                      [Required]
#       artifactsDrop: Name of the input artifacts drop                               [Required]
#       pipelineArtifact: Name of the input pipeline artifact                         [Required]
#       patKeyVaultUrl: KeyVault secret URL that contains PAT token                   [Optional]
#       entraServiceConnection: Service Connection used for downloading drop          [Optional]
#       context: Path within the drop with the container build context                [Required]
#       image: Fully qualified name of the image to build, including tags             [Required]
#       dockerfile: Path to the Dockerfile relative to context directory              [Optional]
#       buildArguments: Additional arguments to be passed to Docker client            [Optional]
#       enablePull: If set to false docker will use local images. Default: true       [Optional]
#       useBuildKit: Enables building with BuildKit                                   [Optional]
#       esrpServiceConnection: ESRP Service Connection to sign container image        [Optional]
#       metadataArtifactName: Pipeline artifact name for Docker metadata              [Optional]
#       useCommonMetadataArtifact: Allow multiple metadata files in a single artifact [Optional]
#       dotnetVersion: Version of the .NET SDK to install                             [Optional]

parameters:

- name: job
  type: job
  default: {}

- name: sdl
  type: object

- name: pool
  type: object

- name: isOfficial
  type: boolean

- name: authenticatedContainerRegistries
  type: object
  default: null

- name: internalConfig
  type: object

- name: settings
  type: object

- name: featureFlags
  type: object

- name: pipelineSdl
  type: object

- name: spokeEsEnforcedSdl
  type: object

jobs:
# Insert all properties other than those we process separately
- ${{ each pair in parameters.job }}:
    ${{ if notIn(pair.key, 'arguments', 'steps', 'templateContext', 'pool') }}:
      ${{ pair.key }}: ${{ pair.value }}

  # Insert the pool specification if the pool property was specified at the job level
  # We need to handle the case when the value is just a string with the pool name and
  # when it is an object. In case of object, we want to process some properties (such as
  # 'image' separately). We also need to take care of cases when additional demands are specified
  ${{ if parameters.job.pool }}:
    ${{ if startsWith(convertToJson(parameters.job.pool), '{') }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.job.pool.name) }}:
        'Pool "${{ parameters.job.pool.name }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool:
        ${{ each pair in parameters.job.pool }}:
          ${{ if notIn(pair.key, 'image', 'workspace', 'demands') }}:
            ${{ pair.key }}: ${{ pair.value }}
        ${{ if or(parameters.job.pool.image, parameters.job.pool.workspace) }}:
          demands:
          - ${{ if parameters.job.pool.image }}:
            - ImageOverride -equals ${{ parameters.job.pool.image }}
          - ${{ if parameters.job.pool.workspace }}:
            - ${{ if eq(parameters.job.pool.os, 'linux') }}:
              - WorkFolder -equals /mnt/${{ parameters.job.pool.workspace }}
            - ${{ else }}:
              - WorkFolder -equals C:\${{ parameters.job.pool.workspace }}
          - ${{ if and(parameters.job.pool.demands, not(startsWith(convertToJson(parameters.job.pool), '['))) }}:
            - ${{ parameters.job.pool.demands }}
          - ${{ else }}:
            - ${{ each demand in parameters.job.pool.demands }}:
              - ${{ demand }}
        ${{ elseif parameters.job.pool.demands }}:
          demands: ${{ parameters.job.pool.demands }}
    ${{ else }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.job.pool) }}:
        'Pool "${{ parameters.job.pool }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool: ${{ parameters.job.pool }}

  # Validate Authenticated Container Registries
  ${{ each authenticatedACR in parameters.authenticatedContainerRegistries }}:
    ${{ if and(parameters.sdl.enforcedTenant, authenticatedACR.tenant, ne(parameters.sdl.enforcedTenant, authenticatedACR.tenant)) }}:
      'Enforced tenant is set to ${{ parameters.sdl.enforcedTenant }}. Usage of ${{ authenticatedACR.tenant }} tenant is forbidden.': error

  # Validate drop authentication
  ${{ if and(parameters.job.templateContext.arguments.patKeyVaultUrl, parameters.job.templateContext.arguments.entraServiceConnection) }}:
    'Only patKeyVaultUrl or entraServiceConnection can be set at once, but not both': error

  variables:
  - template: ../Variables/CommonVariables.yml
    parameters:
      isOfficial: ${{ parameters.isOfficial }}
      os: ${{ parameters.pool.os }}
      authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries}}
      enforcedTenant: ${{ parameters.sdl.enforcedTenant }}
      job: ${{ parameters.job }}

  steps:
  - checkout: none
  - ${{ if parameters.job.templateContext.arguments.dotnetVersion }}:
    - task: UseDotNet@2
      displayName: Install Dotnet SDK ${{ parameters.job.templateContext.arguments.dotnetVersion }}
      inputs:
        packageType: 'sdk'
        version: ${{ parameters.job.templateContext.arguments.dotnetVersion }}
  - template: ../Steps/DockerAuthenticateACR.yml
    parameters:
      authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
  - ${{ if parameters.job.templateContext.arguments.artifactsDrop }}:
    - ${{ if parameters.job.templateContext.arguments.patKeyVaultUrl }}:
      - template: ../Steps/FetchKeyVaultSecret.yml
        parameters:
          secretUrl: ${{ parameters.job.templateContext.arguments.patKeyVaultUrl }}
          variable: ArtifactServices.Drop.PAT
    - task: artifactDropDownloadTask@1
      displayName: ðŸ”’ Download Artifact Drop
      inputs:
        dropMetadataContainerName: ${{ parameters.job.templateContext.arguments.artifactsDrop }}
        destinationPath: $(System.DefaultWorkingDirectory)
        rootPaths: ${{ parameters.job.templateContext.arguments.context }};/${{'_manifest'}}
        ${{ if eq(parameters.pool.os, 'linux') }}:
          writable: true
        ${{ if parameters.job.templateContext.arguments.patKeyVaultUrl }}:
          usePat: false
        ${{ if parameters.job.templateContext.arguments.entraServiceConnection }}:
          entraServiceConnection: ${{ parameters.job.templateContext.arguments.entraServiceConnection }}
          usePat: true
  - ${{ elseif parameters.job.templateContext.arguments.pipelineArtifact }}:
    - task: DownloadPipelineArtifact@2
      displayName: ðŸ”’ Download Pipeline Artifact
      inputs:
        artifactName: ${{ parameters.job.templateContext.arguments.pipelineArtifact }}
        targetPath: $(System.DefaultWorkingDirectory)
        ${{ if and(parameters.job.templateContext.arguments.context, ne(parameters.job.templateContext.arguments.context, '.')) }}:
          patterns: |
                    ${{ parameters.job.templateContext.arguments.context }}/**/*
                    _manifest/**/*
  - ${{ else }}:
    - "Missing artifact info in ContainerBuildJob": error

  - ${{ if eq(parameters.sdl.sbom.validate, true) }}:
    - template: ../Core/Steps/SBOM.Validation.Steps.yml
      parameters:
        BuildDropPath: $(System.DefaultWorkingDirectory)
        OutputPath: $(Build.ArtifactStagingDirectory)/sbom-result.json
        target: host
        ${{ if in(parameters.featureFlags.sbomValidatorIgnoreMissing, true, false) }}:
          sbomValidatorIgnoreMissing: ${{ parameters.featureFlags.sbomValidatorIgnoreMissing }}

  - template: ../Steps/SDLBreakglassVerification.yml
    parameters:
      isOfficial: ${{ parameters.isOfficial }}
      pipelineSdl: ${{ parameters.pipelineSdl }}
      jobSdl: ${{ parameters.job.templateContext.sdl }}
      spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
      skipBuildTagsForGitHubPullRequests: ${{ parameters.settings.skipBuildTagsForGitHubPullRequests }}

  - template: ../Steps/ContainerImageBuild.yml
    parameters:
      dockerfile: "$(System.DefaultWorkingDirectory)/${{ parameters.job.templateContext.arguments.context }}/${{ coalesce(parameters.job.templateContext.arguments.dockerfile, 'Dockerfile') }}"
      context: "$(System.DefaultWorkingDirectory)/${{ parameters.job.templateContext.arguments.context }}"
      buildArguments: ${{ parameters.job.templateContext.arguments.buildArguments }}
      localImage: image:tag
      enableNetwork: ${{ eq(parameters.job.templateContext.arguments.enableNetwork, 'true') }}
      enablePull: ${{ ne(parameters.job.templateContext.arguments.enablePull, 'false') }}
      useBuildKit: ${{ eq(parameters.job.templateContext.arguments.useBuildKit, 'true') }}
      enableCache: ${{ eq(parameters.job.templateContext.arguments.enableCache, 'true') }}
      enableHyperV: ${{ parameters.job.templateContext.arguments.enableHyperV }}
      pool: ${{ parameters.pool }}
      sdl: ${{ parameters.sdl }}
      runSdlBinaryAnalysis: false
      featureFlags: ${{ parameters.featureFlags }}
      settings: ${{ parameters.settings }}
      internalConfig: ${{ parameters.internalConfig }}
      isOfficial: ${{ parameters.isOfficial }}
      codeSignValidationEnabled: ${{ parameters.sdl.codeSignValidation.enabledInLevels }}

  - template: ../Steps/Outputs/containerImage.yml
    parameters:
      args:
        localImage: image:tag
        remoteImage: ${{ lower(parameters.job.templateContext.arguments.image) }}

        ${{ if parameters.job.templateContext.arguments.metadataArtifactName }}:
          saveMetadataToPath: $(System.DefaultWorkingDirectory)/metadata
        ${{ else }}:
          saveMetadataToPath: ${{ lower(parameters.job.templateContext.arguments.saveMetadataToPath) }}

        esrpServiceConnection: ${{ lower(parameters.job.templateContext.arguments.esrpServiceConnection) }}
        useESRPSigningV5: ${{ lower(parameters.job.templateContext.arguments.useESRPSigningV5) }}
        esrpUseMSIAuthentication: ${{ lower(parameters.job.templateContext.arguments.esrpUseMSIAuthentication) }}
        esrpMappingClientId: ${{ lower(parameters.job.templateContext.arguments.esrpMappingClientId) }}
        esrpAppRegistrationClientId: ${{ lower(parameters.job.templateContext.arguments.esrpAppRegistrationClientId) }}
        esrpAppRegistrationTenantId: ${{ lower(parameters.job.templateContext.arguments.esrpAppRegistrationTenantId) }}
        esrpAuthAKVName: ${{ lower(parameters.job.templateContext.arguments.esrpAuthAKVName) }}
        esrpAuthCertName: ${{ lower(parameters.job.templateContext.arguments.esrpAuthCertName) }}
        esrpAuthSignCertName: ${{ lower(parameters.job.templateContext.arguments.esrpAuthSignCertName) }}
      sdl: ${{ parameters.sdl }}
      target: host
      pool: ${{ parameters.pool }}
      skipSDL: true
      isOfficial: ${{ parameters.isOfficial }}
      featureFlags: ${{ parameters.featureFlags }}
      settings: ${{ parameters.settings }}
      internalConfig: ${{ parameters.internalConfig }}

  - ${{ if and(eq(parameters.job.templateContext.arguments.useCommonMetadataArtifact, true), parameters.job.templateContext.arguments.metadataArtifactName) }}:
    - template: ../Steps/Outputs/buildArtifacts.yml
      parameters:
        args:
          PathtoPublish: $(System.DefaultWorkingDirectory)/metadata
          ArtifactName: ${{ parameters.job.templateContext.arguments.metadataArtifactName }}
        sdl: ${{ parameters.sdl }}
        target: host
        pool: ${{ parameters.pool }}
        featureFlags: ${{ parameters.featureFlags }}
        settings: ${{ parameters.settings }}
        skipSDL: true
        isOfficial: ${{ parameters.isOfficial }}
        internalConfig: ${{ parameters.internalConfig }}

  - ${{ elseif parameters.job.templateContext.arguments.metadataArtifactName }}:
    - template: ../Steps/Outputs/pipelineArtifact.yml
      parameters:
        args:
          targetPath: $(System.DefaultWorkingDirectory)/metadata
          artifactName: ${{ parameters.job.templateContext.arguments.metadataArtifactName }}
        sdl: ${{ parameters.sdl }}
        target: host
        pool: ${{ parameters.pool }}
        featureFlags: ${{ parameters.featureFlags }}
        settings: ${{ parameters.settings }}
        skipSDL: true
        isOfficial: ${{ parameters.isOfficial }}
        internalConfig: ${{ parameters.internalConfig }}
