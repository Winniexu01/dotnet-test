parameters:

- name: job
  type: job
  default: {}

- name: sdl
  type: object

- name: container
  type: object
  default: {}

- name: pool
  type: object

- name: authenticatedContainerRegistries
  type: object
  default: null

- name: internalConfig
  type: object

- name: isOfficial
  type: boolean

- name: pipelineSdl
  type: object

- name: featureFlags
  type: object

- name: settings
  type: object

- name: allowInternalSteps
  type: boolean
  default: false

- name: spokeEsEnforcedSdl
  type: object

- name: networkIsolationMode
  type: string
  default: Enforce
  values:
  - None
  - Audit
  - Enforce

- name: networkIsolationPolicy
  type: string
  default: ''

jobs:
# Insert all properties other than those we process separately
- ${{ each pair in parameters.job }}:
    ${{ if notIn(pair.key, 'steps', 'templateContext', 'container', 'pool', 'variables') }}:
      # We don't want to include strategy if this is a deployment job, otherwise we want to just include it as it is
      ${{ if not(and(eq(pair.key, 'strategy'), parameters.job.deployment)) }}:
        ${{ pair.key }}: ${{ pair.value }}

  # Insert the pool specification if the pool property was specified at the job level
  # We need to handle the case when the value is just a string with the pool name and
  # when it is an object. In case of object, we want to process some properties (such as
  # 'image' separately). We also need to take care of cases when additional demands are specified
  ${{ if parameters.job.pool }}:
    ${{ if startsWith(convertToJson(parameters.job.pool), '{') }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.job.pool.name) }}:
        'Pool "${{ parameters.job.pool.name }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool:
        ${{ each pair in parameters.job.pool }}:
          ${{ if notIn(pair.key, 'image', 'workspace', 'demands') }}:
            ${{ pair.key }}: ${{ pair.value }}
        ${{ if and(eq(parameters.job.pool.os, 'macOS'), eq(parameters.job.pool.name, 'Azure Pipelines'), parameters.job.pool.image) }}:
          vmImage: ${{ parameters.job.pool.image }}
        ${{ elseif or(parameters.job.pool.image, parameters.job.pool.workspace) }}:
          demands:
          - ${{ if parameters.job.pool.image }}:
            - ImageOverride -equals ${{ parameters.job.pool.image }}
          - ${{ if parameters.job.pool.workspace }}:
            - ${{ if eq(parameters.job.pool.os, 'linux') }}:
              - WorkFolder -equals /mnt/${{ parameters.job.pool.workspace }}
            - ${{ else }}:
              - WorkFolder -equals C:\${{ parameters.job.pool.workspace }}
          - ${{ if and(parameters.job.pool.demands, not(startsWith(convertToJson(parameters.job.pool), '['))) }}:
            - ${{ parameters.job.pool.demands }}
          - ${{ else }}:
            - ${{ each demand in parameters.job.pool.demands }}:
              - ${{ demand }}
        ${{ elseif parameters.job.pool.demands }}:
          demands: ${{ parameters.job.pool.demands }}
    ${{ else }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.job.pool) }}:
        'Pool "${{ parameters.job.pool }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool: ${{ parameters.job.pool }}

  # Validate breakGlass justification
  ${{ if and(parameters.job.templateContext.breakGlass, not(parameters.job.templateContext.breakGlass.justification)) }}:
    "Missing breakGlass.justification for job ${{ parameters.job.job }}": error

  # Validate Authenticated Container Registries
  ${{ each authenticatedACR in parameters.authenticatedContainerRegistries }}:
    ${{ if and(parameters.sdl.enforcedTenant, authenticatedACR.tenant, ne(parameters.sdl.enforcedTenant, authenticatedACR.tenant)) }}:
      'Enforced tenant is set to ${{ parameters.sdl.enforcedTenant }}. Usage of ${{ authenticatedACR.tenant }} tenant is forbidden.': error

  variables:

  - template: ../Variables/CommonVariables.yml
    parameters:
      isOfficial: ${{ parameters.isOfficial }}
      os: ${{ parameters.pool.os }}
      authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
      enforcedTenant: ${{ parameters.sdl.enforcedTenant }}
      job: ${{ parameters.job }}

  - ${{ if parameters.job.variables }}:
    - ${{ each pair2 in parameters.job.variables }}:
      - ${{ if ne(pair2.key, '') }}:
        - name: ${{ pair2.key }}
          value: ${{ pair2.value }}
      - ${{ else }}:
        - ${{ insert }}: ${{ pair2 }}

  - ${{ if parameters.job.templateContext.breakGlass }}:
      name: OneES_targetName
      value: host
    ${{ else }}:
      name: OneES_targetName
      value: ${{ coalesce(parameters.container.name, 'host') }}

  ${{ if parameters.job.deployment }}:
    strategy:
      ${{ each strategyPair in parameters.job.strategy }}:
        ${{ strategyPair.key }}:
          ${{ each lifeCycleHook in parameters.internalConfig.deploymentLifeCycleHooks }}:
            ${{ if strategyPair.value[lifeCycleHook] }}:
              ${{ lifeCycleHook }}:
                steps:
                - ${{ if strategyPair.value[lifeCycleHook].steps }}:
                  - template: ../Steps/DisallowReleaseStepsInternal.yml
                    parameters:
                      jobName: ${{ parameters.job.deployment }}
                      steps: ${{ strategyPair.value[lifeCycleHook].steps }}
                - template: ../Steps/AgentSteps.yml
                  parameters:
                    job: ${{ parameters.job }}
                    ${{ if strategyPair.value[lifeCycleHook].steps }}:
                      steps: ${{ strategyPair.value[lifeCycleHook].steps }}
                      ${{ if containsValue(strategyPair.value.deploy.steps.*.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@1') }}:
                        hasCheckOutInUserSteps: true
                    sdl: ${{ parameters.sdl }}
                    container: ${{ parameters.container }}
                    pool: ${{ parameters.pool }}
                    isOfficial: ${{ parameters.isOfficial }}
                    pipelineSdl: ${{ parameters.pipelineSdl }}
                    spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
                    target: ${{ variables.OneES_targetName }}
                    featureFlags: ${{ parameters.featureFlags }}
                    settings: ${{ parameters.settings }}
                    internalConfig: ${{ parameters.internalConfig }}
                    authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
                    allowInternalSteps: ${{ parameters.allowInternalSteps }}
                    # Setting the mode to None for deployments, since we only want network isolation in build pipelines for now.
                    networkIsolationMode: None
                    networkIsolationPolicy: ''
                    deploymentJobUsedInNonReleaseWorkflow: true
          ${{ if strategyPair.value.on }}:
            on:
              ${{ if strategyPair.value.on.success.steps }}:
                success:
                  steps:
                  - template: ../Steps/DisallowReleaseStepsInternal.yml
                    parameters:
                      jobName: ${{ parameters.job.deployment }}
                      steps: ${{ strategyPair.value.on.success.steps }}
                  - ${{ strategyPair.value.on.success.steps }}
              ${{ if strategyPair.value.on.failure.steps }}:
                failure:
                  steps:
                  - template: ../Steps/DisallowReleaseStepsInternal.yml
                    parameters:
                      jobName: ${{ parameters.job.deployment }}
                      steps: ${{ strategyPair.value.on.failure.steps }}
                  - ${{ strategyPair.value.on.failure.steps }}

  ${{ else }}:
    steps:
    - ${{ if parameters.job.steps }}:
      - template: ../Steps/DisallowReleaseStepsInternal.yml
        parameters:
          jobName: ${{ parameters.job.job }}
          steps: ${{ parameters.job.steps }}
    - template: ../Steps/AgentSteps.yml
      parameters:
        job: ${{ parameters.job }}
        ${{ if parameters.job.steps }}:
          steps: ${{ parameters.job.steps }}
          ${{ if containsValue(parameters.job.steps.*.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@1') }}:
            hasCheckOutInUserSteps: true
        sdl: ${{ parameters.sdl }}
        container: ${{ parameters.container }}
        pool: ${{ parameters.pool }}
        isOfficial: ${{ parameters.isOfficial }}
        pipelineSdl: ${{ parameters.pipelineSdl }}
        spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
        target: ${{ variables.OneES_targetName }}
        featureFlags: ${{ parameters.featureFlags }}
        settings: ${{ parameters.settings }}
        internalConfig: ${{ parameters.internalConfig }}
        authenticatedContainerRegistries: ${{ parameters.authenticatedContainerRegistries }}
        allowInternalSteps: ${{ parameters.allowInternalSteps }}
        networkIsolationMode: ${{ parameters.networkIsolationMode }}
        networkIsolationPolicy: ${{ parameters.networkIsolationPolicy }}
        deploymentJobUsedInNonReleaseWorkflow: false
