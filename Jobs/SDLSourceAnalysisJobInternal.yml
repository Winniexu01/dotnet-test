parameters:
- name: sdl
  type: object

- name: pool
  type: object

- name: job
  type: job
  default: {}

- name: customBuildTags
  type: object

- name: customLogIssues
  type: object

- name: stages
  type: stageList

- name: featureFlags
  type: object

- name: settings
  type: object

- name: repository
  type: object
  default:
    repository: self

- name: additionalRepositories
  type: object
  default: null

- name: customCheckout
  type: object
  default: null

- name: includeAdoOrgsForCustomsCheckoutSteps
  type: object
  default:
  - cbad75f8-022e-4112-a6fb-e5312f755f69  # 1ESPipelineTemplates-PPE

- name: includeReposForCustomCheckoutSteps
  type: object
  default:
  # - 78ada9a4-7d0f-4ef6-87df-2106f7096167  # 1ESPipelineTemplates
  - ba47400f-eebe-4850-a8bf-ef694ef81414  # https://dev.azure.com/office/Office/_git/Office
  - a45cf45f-f6db-438b-baf7-da6b3de589ba  # https://dev.azure.com/microsoft/edge/_git/chromium.src
  - cbe0638d-f859-4e8d-95a7-5015aefed07a  # https://dev.azure.com/microsoft/Edge/_git/chromium.v8
  - dcd34678-d820-44d5-b41e-18b114c05fc2  # https://dev.azure.com/onedrive/SPIN/_git/VhdHotsync
  - 74031860-e0cd-45a1-913f-10bbf3f82555  # https://office.visualstudio.com/DefaultCollection/OC/_git/office-bohemia
  # ---------BEGIN MSFTDEVICES ---------------
  - c443f5dd-5c8d-48bd-9be5-aeba2296d918
  - bafe00ac-cd70-46af-b2a5-baa77cd711ce
  - e0f3b776-c2ec-4ccc-bc49-3a14e74510f1
  - edd55127-b259-43ad-996f-986adcf6fbc6
  - 07d206ba-da73-41aa-adec-17701a4fb199
  - 7a9c4e68-85ab-4a26-8dac-23fe6f41da59
  - 83dc653c-2b17-4317-9fc3-2b7ec8b29004
  - 646710ee-0964-49ad-944b-43b13978f397
  - 482c52f8-5fec-4c10-a065-cdb6a294d472
  - 6e206fe5-5bbc-4882-a807-88fe494cebbf
  - 1a197eba-e1ca-4f09-ba81-34d9896cc746
  - 51d753fa-6370-4261-9133-0b05543ca34e
  - 7fa83ede-fc54-4449-b42d-c7aaf877c71b
  - f1e7957f-5e0a-45ee-ba77-66c8296782fe
  - 8075445c-78e7-4038-a8fd-81cb78f8cc26
  # ----------END MSFTDEVICES --------------
  - d702c979-1be9-4bee-92b4-99a2b1684b64  # https://microsoft.visualstudio.com/Windows%20Defender/_git/WD.Signatures
  - e924bf43-e028-472f-96ba-25e5e337a047  # https://dev.azure.com/mseng/AzureDevOps/_git/Libgit2-for-Skyrise. Have special aspects for checking out submodules from other ADO orgs
  - 733bda40-9517-4ae3-bb42-bf0b5cbbce3f  # https://msazure.visualstudio.com/One/_git/AD-MFA-phonefactor-phoneApp-iPhone  Need additional steps for checking out submodules
  - 49b0c9f4-555f-4624-8157-a57e6df513b3  # https://dev.azure.com/office/Office/_git/1JS  Source analysis without this is taking ~30 mins to checkout their repo
  - fb240610-b309-4925-8502-65ff76312c40  # https://dev.azure.com/mseng/AzureDevOps/_git/AzureDevOps - need to remove after BuildXL releases VHD feature flag
  - f8990680-0bb3-475b-a4b2-33bb08e0bf7b  # https://dev.azure.com/msasg/ContentServices/_git/msnews-experiences - need to remove after BuildXL releases VHD feature flag
  - 50d331c7-ea65-45eb-833f-0303c6c2387e  # https://dev.azure.com/mseng/Domino/_git/BuildXL.Internal - need to remove after BuildXL releases VHD feature flag
  - 0bf56e64-4671-4706-89da-51fa4fb8a1e7  # https://dev.azure.com/msasg/Bing_Ads/_git/xandr-rtp-bidder
  - 58131480-2bbc-46cb-b759-560c59ebc843  # https://dev.azure.com/msasg/Bing_Ads/_git/xandr-rtp-custom-model
  - 3829bdd7-1ab6-420c-a8ec-c30955da3205  # https://dev.azure.com/onedrive/ODSP-Web/_git/odsp-web - Need to remove after changes to existing pipeline usage

- name: predefinedOneESPTVariables
  type: object

- name: skipAutoInjectedTasksVariables
  type: object

- name: internalConfig
  type: object

- name: isOfficial
  type: boolean

- name: pipelineSdl
  type: object

- name: spokeEsEnforcedSdl
  type: object

- name: cacheDirectory
  type: string
  default: $(Pipeline.Workspace)/1es_pt_source_analysis_cache

jobs:
- job: SDLSources_${{ replace(replace(replace(replace(parameters.repository.repository, '-', '_'), 'git://', ''), '/', '_'), '.', '_') }}
  displayName: SDL Sources Analysis (${{ parameters.repository.repository }})
  continueOnError: false
  timeoutInMinutes: ${{ parameters.sdl.sourceAnalysisTimeoutInMinutes }}
  variables:
  - name: OneES_SkipSDLSourcesAnalysis
    value: false  # Set to false to prevent users from setting the variable to skip SDL Sources Analysis. The variable has to be set by 1ES PT
  - ${{ if contains(variables['Build.Repository.Uri'], 'github.com') }}:
    - name: GDN_SUPPRESS_FORKED_BUILD_WARNING
      value: true
  - ${{ parameters.skipAutoInjectedTasksVariables }}
  - ${{ parameters.predefinedOneESPTVariables }}
  - ${{ if parameters.sdl.sourceAnalysisVariablesToReset }}:
    - ${{ each sdlvariable in parameters.sdl.sourceAnalysisVariablesToReset }}:
      - name: ${{ sdlvariable }}
        value: ''
  - ${{ if and(ne(parameters.repository.repository, 'self'), not(startsWith(parameters.repository.repository, 'git://'))) }}:
    - name: Codeql.Repository.Resource
      value: ${{ parameters.repository.repository }}
    - name: Codeql.ADO.Build.SourceVersion
      value: $[ resources.repositories[variables['Codeql.Repository.Resource']].version ]
    - name: Codeql.ADO.Build.Repository.Uri
      value: $[ resources.repositories[variables['Codeql.Repository.Resource']].url ]
    - name: Codeql.ADO.Build.SourceBranch
      value: $[ resources.repositories[variables['Codeql.Repository.Resource']].ref ]
    - name: Codeql.ADO.Build.SourceBranchName
      value: $[ replace(resources.repositories[variables['Codeql.Repository.Resource']].ref, 'refs/heads/', '') ]
    - name: Codeql.ADO.Build.Repository.Provider
      value: replace(replace(replace(resources.repositories[variables['Codeql.Repository.Resource']].type, 'github', 'GitHub'), 'enterprise', 'Enterprise'), 'git', 'TfsGit')
  steps:
  - ${{ if and(eq(parameters.repository.repository, 'self'), eq(parameters.sdl.roslyn.enabled, true), containsValue(parameters.stages.*.jobs.*.templateContext.sdl.roslyn.enabled, 'false')) }}:
    - powershell: |
        Write-Output "##vso[task.logissue type=warning;]1ES PT Warning: Roslyn is enabled at the pipeline level but disabled for atleast one job. Please remove the property to disable Roslyn at job level. More details: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/roslyn#roslyn-enforcement"
  #  Check if all checkout repositories has been specified in additionalSDLSourceReposToScan or excludeReposFromSDLSourcesScan
  - ${{ each step in parameters.stages.*.jobs.*.steps.* }}:
    - ${{ if startsWith(step.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@') }}:
      - ${{ if and(not(eq(step.inputs.repository, 'self')), not(eq(step.inputs.repository, 'none')), not(containsValue(parameters.sdl.sourceRepositoriesToScan.include.*.repository, step.inputs.repository)), not(containsValue(parameters.sdl.sourceRepositoriesToScan.exclude.*.repository, step.inputs.repository)))}}:
        - ${{ if ne(step.inputs.repository, format('git://{0}/{1}@$(Build.SourceBranch)', variables['System.TeamProject'], variables['Build.Repository.Name'])) }}:
          - 'The repository "${{ convertToJson(step.inputs.repository) }}" to be checked out has not been specified under sdl.sourceRepositoriesToScan.include or sdl.sourceRepositoriesToScan.exclude. For more information, visit https://aka.ms/1espt/multi-repo-sdl': error
  - ${{ if containsValue(parameters.sdl.sourceRepositoriesToScan.exclude.*.repository, 'self')}}:
    - 'The repository self cannot be excluded from SDL Sources Analysis. Please remove self from sdl.sourceRepositoriesToScan.exclude': error

  - ${{ each repository in parameters.sdl.sourceRepositoriesToScan.include }}:
    - ${{ if containsValue(parameters.sdl.sourceRepositoriesToScan.exclude.*.repository, repository.repository) }}:
      - 'The repository ${{ repository.repository }} has been specified at both sdl.sourceRepositoriesToScan.include and sdl.sourceRepositoriesToScan.exclude': error

  - ${{ if parameters.job.templateContext.showAdoHostedPoolWarning }}:
    - task: PowerShell@2
      displayName: Validate 1ES Windows Hosted Pool (1ES PT)
      continueOnError: false
      inputs:
        targetType: inline
        errorActionPreference: 'stop'
        script: |
          Write-Output "##vso[task.logissue type=error;]1ES PT requires a 1ES Hosted Pool with Windows image for running SDL source-based analysis tools. For more information on how you specify a windows pool for SDL source-based analysis, visit https://aka.ms/1esgptfaq#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage"
          throw

  - template: ../Core/Steps/RunTask.yml
    parameters:
      displayName: Validate Hosted Pool Information
      path: validateHostedPool.ps1
      env:
        HOST_ARCHITECTURE: ${{ parameters.pool.hostArchitecture }}
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        SYSTEM_DEFINITIONID: $(System.DefinitionId)
        SYSTEM_COLLECTIONURI: $(System.CollectionUri)
        SYSTEM_TEAMPROJECT: $(System.TeamProject)
        SYSTEM_TEAMPROJECTID: $(System.TeamProjectId)
        BUILD_REPOSITORY_ID: $(Build.Repository.ID)
        BUILD_REPOSITORY_URI: $(Build.Repository.Uri)
        PIPELINEGOVERNANCESTATUS_AUDITED: variables['PipelineGovernanceStatus_Audited']
        PIPELINECLASSIFICATION_AUDITED: variables['PipelineClassification_Audited']
      arguments: >-
        -TargetName ''
        -StepTargets ''
        -StepsLength 0
        -SkipStatelessValidation True
        -OS ${{ parameters.pool.os }}
        -IgnoreProductionPoolCheck
        ${{ replace(replace(and(parameters.IsOfficial, ne(parameters.job.templateContext.runAsUnofficial, true)), True, '-IsOfficialTemplate'), False, '') }}

  - ${{ if eq(parameters.settings.enableRetention, true) }}:
    - template: ../Core/Steps/RunTask.yml
      parameters:
        displayName: Retain the pipeline run
        path: build_retention.py
        continueOnError: true
        env:
          systemAccessToken: $(System.AccessToken)
          systemDefinitionId: $(System.DefinitionId)
          systemCollectionUri: $(System.CollectionUri)
          systemProjectId: $(System.TeamProjectId)
          systemBuildId: $(Build.BuildId)

  - ${{ if eq(parameters.sdl.liquidSecureCheck.enabled, true) }}:
    - template: ../Core/Steps/RunTask.yml
      parameters:
        continueOnError: ${{ eq(parameters.sdl.liquidSecureCheck.failWhenNotCompliant, false) }}
        displayName: '💧 Liquid: SecureCheck'
        path: securecheck_main.py
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          OneES_SUBJECTIDS: ${{ parameters.sdl.liquidSecureCheck.subjectIds }}
          OneES_PROFILES: ${{ parameters.sdl.liquidSecureCheck.profiles }}
          OneES_FAILWHENNOTCOMPLIANT: ${{ parameters.sdl.liquidSecureCheck.failWhenNotCompliant }}

  - template: ../Steps/SDLBreakglassVerification.yml
    parameters:
      isOfficial: ${{ parameters.isOfficial }}
      pipelineSdl: ${{ parameters.pipelineSdl }}
      jobSdl: ${{ parameters.job.templateContext.sdl }}
      spokeEsEnforcedSdl: ${{ parameters.spokeEsEnforcedSdl }}
      skipBuildTagsForGitHubPullRequests: ${{ parameters.settings.skipBuildTagsForGitHubPullRequests }}

  # Disallow release steps in non release jobs (agentless build + release cases)
  - ${{ each stage in parameters.stages }}:
    - ${{ each job in stage.jobs }}:
      - ${{ if and(not(eq(job.templateContext.type, 'releaseJob')), eq(job.pool.name, 'server')) }}:
        - template: ../Steps/DisallowReleaseSteps.yml
          parameters:
            job: ${{ job }}
            internalConfig: ${{ parameters.internalConfig }}

  - ${{ if or(parameters.customBuildTags, parameters.customLogIssues) }}:
    - template: ../Steps/Tag.yml
      parameters:
        customBuildTags: ${{ parameters.customBuildTags }}
        customLogIssues: ${{ parameters.customLogIssues }}
        settings: ${{ parameters.settings }}

  # 6d15af64-176c-496d-b583-fd2ae21d4df4@ is a checkout step: https://docs.microsoft.com/en-us/azure/devops/extend/develop/pipeline-decorator-context?view=azure-devops#task-names-and-guids
  - ${{ if eq(parameters.settings.skipSDLSourcesWhenCheckoutIsNoneForAllJobs, true) }}:
    - ${{ each stage in parameters.stages }}:
      - ${{ each job in stage.jobs }}:
        - ${{ if job.deployment }}:
          - ${{ if or(containsValue(job.strategy.*.*.*.*.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@1'), containsValue(job.strategy.*.on.*.*.*.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@1')) }}:
            - '"skipSDLSourcesWhenCheckoutIsNoneForAllJobs" is set thus checkout step is not allowed in stage "${{ stage.stage }}" job "${{ coalesce(job.job, job.deployment) }}". For more information, visit https://aka.ms/1espt/skip-sdl-stage': error
        - ${{ else }}:
            # if skipSDLSourcesWhenCheckoutIsNoneForAllJobs is set and any of the jobs does not have a checkout step, then we should throw an error
            # allowed ev2 workflows, artifactJob, and agentless jobs are allowed to skip the checkout check as they already set the checkout to none or do not support checkout
          - ${{ if and(not(containsValue(job.steps.*.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@1')), not(and(eq(job.templateContext.type, 'releaseJob'), containsValue(parameters.internalConfig.releaseWorkflowsAllowedToBypassCheckoutStepCheckForSDL, job.templateContext.workflow))), not(and(eq(job.templateContext.type, 'releaseJob'), not(job.templateContext.workflow), eq(coalesce(parameters.featureFlags.allowCheckoutInReleaseJobs, containsValue(parameters.internalConfig.pipelinesWithDependencyOnCheckout, format('{0}/{1}', variables['System.TeamProjectId'], variables['System.DefinitionId'])), false), false))), not(eq('artifactJob', job.templateContext.type)), ne(job.pool.name, 'server'))}}:
            - '"skipSDLSourcesWhenCheckoutIsNoneForAllJobs" is set but job "${{ coalesce(job.job, job.deployment) }}" in stage "${{ stage.stage }}" does not have "checkout" step. For more information, visit https://aka.ms/1espt/skip-sdl-stage': error
          - ${{ each step in job.steps }}:
            - ${{ if eq(step.task, '6d15af64-176c-496d-b583-fd2ae21d4df4@1') }}:
              # if skipSDLSourcesWhenCheckoutIsNoneForAllJobs is set and any of the checkout steps is not set to 'checkout: none', then we should throw an error
              - ${{ if ne(step.inputs.repository, 'none') }}:
                - '"skipSDLSourcesWhenCheckoutIsNoneForAllJobs" is set but "checkout: ${{ step.inputs.repository }}" instead of "checkout: none" has been set in stage "${{ stage.stage }}" job "${{ job.job }}". For more information, visit https://aka.ms/1espt/skip-sdl-stage': error
    - ${{ if parameters.sdl.sourceRepositoriesToScan.include }}:
      - '"skipSDLSourcesWhenCheckoutIsNoneForAllJobs" is set but "sdl.sourceRepositoriesToScan.include" is not empty. For more information, visit https://aka.ms/1espt/skip-sdl-stage': error
    - task: PowerShell@2
      displayName: Skip checkout and running SDL Source Analysis Tools (1ES PT)
      continueOnError: true
      inputs:
        targetType: inline
        script: |
          Write-Output "Skipping checkout and SDL Source Analysis Tools because 'skipSDLSourcesWhenCheckoutIsNoneForAllJobs' is set to true and 'checkout: none' is set in all the jobs."
    - checkout: none  # adding this step because ADO injects a self checkout step if there no checkout step in a job. More details: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/steps-checkout?view=azure-pipelines

  - ${{ else }}:
    - ? ${{ if not(or(containsValue(parameters.includeAdoOrgsForCustomsCheckoutSteps, variables['System.CollectionId']),
                    containsValue(parameters.includeReposForCustomCheckoutSteps, variables['Build.Repository.Id'])
          )) }}
      : - ${{ if and(parameters.customCheckout, ne(length(parameters.customCheckout.steps), 0)) }}:
          - 'Custom checkout is used while your repository is not in allowlist. Please reach out to 1ES PT team if you want to add your repository to the allowlist. Follow the link for more information: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/sourceanalysisstage#i-have-a-complex-setup-in-my-repository-and-cannot-utilize-the-standard-checkout-task-for-it-how-can-i-run-sdl-sources-in-this-case': error

    - ${{ if and(parameters.customCheckout, ne(length(parameters.customCheckout.steps), 0)) }}:
      - ${{ if eq(parameters.featureFlags.optimizeSdlCheckout, true) }}:
        - 'Custom checkout is not supported with optimize checkout.': error

      # CODESYNC: Same as checkout in v1/Core/Steps/Windows.SDL.Sources.Analysis.yml
      - ${{ each checkout in parameters.customCheckout.steps }}:
        - ${{ checkout }}

    - ${{ elseif and(eq(parameters.featureFlags.optimizeSdlCheckout, true), containsValue(parameters.internalConfig.optimizeCheckoutEnabledOrgs, variables['System.CollectionId'])) }}:
      - ${{ if parameters.sdl.sourceRepositoriesToScan }}:
        - 'Optimize checkout does not support additional repositories.': error

      - template: ../Steps/VhdCheckout.yml

    - ${{ else }}:
      - template: ../Core/Steps/GitCheckout.Step.yml
        parameters:
          stages: ${{ parameters.stages }}
          git: ${{ parameters.sdl.git }}
          checkout_all_repos: ${{ parameters.sdl.gitCheckout_all_repos }}
          git_lcow: ${{ parameters.sdl.sources_analysis_git_lcow }}
          repository: ${{ parameters.repository }}
          additionalRepositories: ${{ parameters.additionalRepositories }}
          persistCredentials: ${{ and(eq(parameters.sdl.autobaseline.enableForGitHub, true), contains(variables['Build.Repository.Uri'], 'github.com')) }}
          condition: and(succeeded(), ne(variables['OneES_SkipSDLSourcesAnalysis'], true))

    - template: ../Steps/AutoBaselineAndSDLBreakglassChecks.yml  # This step is requried before the SDL Optimization step
      parameters:
        sdl: ${{ parameters.sdl }}
        categories: retail.source
        featureFlags: ${{ parameters.featureFlags }}
        os: ${{ parameters.pool.os }}
        isOfficial: ${{ parameters.isOfficial }}
        ${{ if parameters.sdl.sourceAnalysisPipelineDefinitionId }}:
          sourceAnalysisPipelineDefinitionId: ${{ parameters.sdl.sourceAnalysisPipelineDefinitionId }}
        toolsToUpdateAfterCertainDate: retail.source.credscan:2024-02-29,retail.source.policheck:2024-02-29,retail.source.eslint:2024-02-29,retail.source.bandit:2024-02-29,retail.source.csrf:2024-02-29,retail.source.psscriptanalyzer:2024-02-29,retail.source.armory:2024-02-29
        deleteBaselineEntriesBeforeDate: ${{ parameters.internalConfig.deleteBaselineEntriesBeforeDate }}
        internalConfig: ${{ parameters.internalConfig }}

    - ${{ if eq(parameters.sdl.codeql.interpreted.enabled, true) }}:
      - ${{ if not(startsWith(parameters.repository.repository, 'git://')) }}:
        - task: NodeTool@0
          displayName: Install Node.js 20.x for CodeQL (1ES PT)
          condition: and(ne(variables['ONEES_ENFORCED_CODEQL_ENABLED'], 'false'), or(eq(${{ parameters.sdl.codeql.enabledOnNonDefaultBranches }}, true), eq(variables['OneES_DefaultRepoBranch'], variables['Build.SourceBranch'])))
          continueOnError: true
          inputs:
            versionSpec: '20.x'
        - task: UsePythonVersion@0
          displayName: Install Python 3.x for CodeQL (1ES PT)
          condition: and(ne(variables['ONEES_ENFORCED_CODEQL_ENABLED'], 'false'), or(eq(${{ parameters.sdl.codeql.enabledOnNonDefaultBranches }}, true), eq(variables['OneES_DefaultRepoBranch'], variables['Build.SourceBranch'])))
          continueOnError: true
          inputs:
            versionSpec: '3.x'
        - template: ../Core/Steps/CodeQL3000Init.yml
          parameters:
            target: host
            condition: and(ne(variables['ONEES_ENFORCED_CODEQL_ENABLED'], 'false'), or(eq(${{ parameters.sdl.codeql.enabledOnNonDefaultBranches }}, true), eq(variables['OneES_DefaultRepoBranch'], variables['Build.SourceBranch'])))
            buildMode: none
            language: ${{ parameters.sdl.codeql.interpreted.language }}
            languageDetectorFilter: interpreted
            sdl: ${{ parameters.sdl }}

        - template: ../Core/Steps/CodeQL3000Finalize.yml
          parameters:
            target: host
            condition: and(ne(variables['ONEES_ENFORCED_CODEQL_ENABLED'], 'false'), or(eq(${{ parameters.sdl.codeql.enabledOnNonDefaultBranches }}, true), eq(variables['OneES_DefaultRepoBranch'], variables['Build.SourceBranch'])))
            sdl: ${{ parameters.sdl }}
      - ${{ else }}:
        - powershell: |
            Write-Output "##vso[task.logissue type=warning;]1ES PT Warning: Repository ${{ parameters.repository.repository }} cannot be scanned with CodeQL 3000 in SDL Sources since it cannot be attributed properly. Please ensure this repo has its own CodeQL scan, or set sdl.sourceRepositoriesToScan.runInSingleJob parameter to true."
          displayName: CodeQL 3000 interpreted languages skipped for a repo (1ES PT)

    - ${{ if and(eq(parameters.sdl.incrementalSDLSourceAnalysis, true), or(not(parameters.customCheckout), eq(length(parameters.customCheckout.steps), 0), eq(parameters.customCheckout.allowIncrementalAnalysis, true)), not(parameters.sdl.sourceRepositoriesToScan)) }}:
      - ${{ if ne(lower(variables['Build.Reason']), 'pullrequest') }}:
        - template: ../Steps/RetrieveSourceAnalysisCache.yml
          parameters:
            featureFlags: ${{ parameters.featureFlags }}
            cacheDirectory: ${{ parameters.cacheDirectory }}
            userState: ${{ parameters.sdl.sourceAnalysisCaching.userState }}
      - template: ../Steps/RunSourceAnalysisScanOptimization.yml
        parameters:
          featureFlags: ${{ parameters.featureFlags }}
          directory: $(Build.SourcesDirectory)
          cacheDirectory: ${{parameters.cacheDirectory}}
    - template: ../Core/Steps/Windows.SDL.Sources.Analysis.yml
      parameters:
        sdlExtensionPrefix: ${{ parameters.sdl.sdlExtensionPrefix }}
        target: host
        acceptStaleSignatures: true
        git: ${{ parameters.sdl.git }}
        gitCheckout_all_repos: ${{ parameters.sdl.gitCheckout_all_repos }}
        sources_analysis_git_lcow: ${{ parameters.sdl.sources_analysis_git_lcow }}
        enableAntimalwareScan: ${{ parameters.sdl.antimalwareScan.enabled }}
        enableCredScan: ${{ parameters.sdl.credscan.enabled }}
        credscan_prerelease: ${{ parameters.sdl.credscan.prerelease }}
        credscan_debugMode: ${{ parameters.sdl.credscan.debugMode }}
        credscan_suppressionsFile: ${{ parameters.sdl.credscan.suppressionsFile }}
        credscan_outputFormat: ${{ parameters.sdl.credscan.outputFormat }}
        credscan_severity: ${{ parameters.sdl.credscan.severity }}
        credscan_batchSize: ${{ parameters.sdl.credscan.batchSize }}
        credscan_suppressAsError: ${{ parameters.sdl.credscan.suppressAsError }}
        credscan_use_multithreading: true
        enablePolicheck: ${{ parameters.sdl.policheck.enabled }}
        policheck_sarif: ${{ parameters.sdl.policheck.sarif }}
        policheck_exclusionsFile: ${{ parameters.sdl.policheck.exclusionsFile }}
        policheck_severity: ${{ parameters.sdl.policheck.severity }}
        enableEslint: ${{ parameters.sdl.eslint.enabled }}
        enableAdvancedSecurityPublish: ${{ parameters.sdl.advancedSecurityPublish.enabled }}
        ${{ each pair in parameters.sdl.eslint }}:
          ${{ if not(in(pair.key, 'enabled', 'break', 'enabledInCloudBuild', 'breakInCloudBuild')) }}:
            eslint_${{ pair.key }}: ${{ pair.value }}
        enableAccessibilityInsights: ${{ parameters.sdl.accessibilityinsights.enabled }}
        ${{ each pair in parameters.sdl.accessibilityinsights }}:
          ${{ if not(in(pair.key, 'enabled', 'break')) }}:
            accessibilityinsights_${{ pair.key }}: ${{ pair.value }}
        enableBandit: ${{ parameters.sdl.bandit.enabled }}
        bandit_severity: ${{ parameters.sdl.bandit.severity }}
        bandit_recursive: ${{ parameters.sdl.bandit.recursive }}
        bandit_targets: ${{ parameters.sdl.bandit.targets }}
        bandit_targetsType: ${{ parameters.sdl.bandit.targetsType }}
        bandit_excludedPaths: ${{ parameters.sdl.bandit.excludedPaths }}
        bandit_minSeverity: ${{ parameters.sdl.bandit.minSeverity }}
        bandit_minConfidence: ${{ parameters.sdl.bandit.minConfidence }}
        bandit_baseline: ${{ parameters.sdl.bandit.baseline }}
        enableCsrf: ${{ parameters.sdl.csrf.enabled }}
        csrf_severity: ${{ parameters.sdl.csrf.severity }}
        enableCodeinspector: ${{ parameters.sdl.codeInspector.enabled }}
        codeinspector_toolVersion: ${{ parameters.sdl.codeInspector.toolVersion }}
        codeinspector_productId: ${{ parameters.sdl.codeInspector.productId }}
        codeinspector_excludeFilters: ${{ parameters.sdl.codeInspector.excludeFilters }}
        codeinspector_logLevel: ${{ parameters.sdl.codeInspector.logLevel }}
        enableCodeql_tsandjs: ${{ parameters.sdl.codeql.tsandjs.enabled }}
        enableCodeql_Python: ${{ parameters.sdl.codeql.python.enabled }}
        codeql_severity: ${{ parameters.sdl.codeql.severity }}
        codeql_break: ${{ parameters.sdl.codeql.break }}
        enablePsscriptAnalyzer: ${{ parameters.sdl.psscriptanalyzer.enabled }}
        psscriptanalyzer_policyName: ${{ parameters.sdl.psscriptanalyzer.policyName }}
        psscriptanalyzer_severity: ${{ parameters.sdl.psscriptanalyzer.severity }}
        psscriptanalyzer_settings: ${{ parameters.sdl.psscriptanalyzer.settings }}
        enableArmory: ${{ parameters.sdl.armory.enabled }}
        armory_targetFiles: ${{ parameters.sdl.armory.targetFiles }}
        armory_severity: ${{ parameters.sdl.armory.severity }}
        enableTsa: ${{ parameters.sdl.tsa.enabled }}
        ${{ if parameters.sdl.tsa.config }}:
          tsa_configFile: $(Agent.TempDirectory)/tsaoptions.json
          tsa_config: ${{ parameters.sdl.tsa.config }}
        ${{ else }}:
          tsa_configFile: ${{ parameters.sdl.tsa.configFile }}
          tsa_config:  # Intentionally left blank because tsa config is not specified
        tsa_onboard: ${{ parameters.sdl.tsa.onboard }}
        enableSdtReport: ${{ parameters.sdl.sdtReport.enabled }}
        sdlPolicy: ${{ coalesce(parameters.sdl.policy, 'Microsoft') }}
        sdlSeverity: ${{ coalesce(parameters.sdl.severity, 'Error') }}
        baseline_baselineFile: ${{ parameters.sdl.baseline.baselineFile }}
        baseline_baselineSet: ${{ parameters.sdl.baseline.baselineSet }}
        suppression_suppressionFile: ${{ parameters.sdl.suppression.suppressionFile }}
        suppression_suppressionSet: ${{ parameters.sdl.suppression.suppressionSet }}
        enablePublishLogs: ${{ parameters.sdl.publishLogs.enabled }}
        publishLogs_artifactType: ${{ parameters.sdl.publishLogs.artifactType }}
        publishLogs_condition: ${{ parameters.sdl.publishLogs.condition }}
        moderncop_break: ${{ parameters.sdl.moderncop.break }}
        featureFlags: ${{ parameters.featureFlags }}
        sourceAnalysisCaching: ${{ parameters.sdl.sourceAnalysisCaching }}
        settings: ${{ parameters.settings }}
        tsaUploadCondition: or(variables['OneES_RunInAutoBaseliningMode'], ${{ ne(parameters.sdl.applyOfficialBreakToolPolicyWithTsaEnabled, true) }})
        repository: ${{ parameters.repository }}
        runSdlSourcesAnalysis: and(succeeded(), ne(variables['OneES_SkipSDLSourcesAnalysis'], true))
        additionalRepositories: ${{ parameters.additionalRepositories }}
        ? ${{ if or(containsValue(parameters.includeAdoOrgsForCustomsCheckoutSteps, variables['System.CollectionId']),
                    containsValue(parameters.includeReposForCustomCheckoutSteps, variables['Build.Repository.Id'])
          ) }}
        : ${{ if parameters.customCheckout }}:
            customCheckoutSteps: ${{ parameters.customCheckout.steps }}
            ${{ if parameters.customCheckout.scanDirectory }}:
              scanDirectory: ${{ parameters.customCheckout.scanDirectory }}
        ${{ if or(eq(parameters.featureFlags.autoBaseline, true), and(ne(parameters.featureFlags.autoBaseline, false), not(containsValue(parameters.sdl.disableAutoBaselineByDefaultADOOrgs, variables['System.CollectionUri'])))) }}:
          credscan_break: $(OneES_AutoBaseline_credscan_break)
          policheck_break: $(OneES_AutoBaseline_policheck_break)
          eslint_break: $(OneES_AutoBaseline_eslint_break)
          bandit_break: $(OneES_AutoBaseline_bandit_break)
          csrf_break: $(OneES_AutoBaseline_csrf_break)
          psscriptanalyzer_break: $(OneES_AutoBaseline_psscriptanalyzer_break)
          armory_break: $(OneES_AutoBaseline_armory_break)
          ${{ if or(and(eq(parameters.sdl.sourceRepositoriesToScan.include, ''), eq(parameters.sdl.sourceRepositoriesToScan.exclude, '')), eq(parameters.featureFlags.enableMultirepoScenario, true)) }}:
            continueOnError: false
            enableAutoBaselining: true
          ${{ else }}:
            ${{ each wave in parameters.internalConfig.prefastAndBinskimRebaselineWaves }}:
              ${{ if or(containsValue(wave.value.orgs, variables['System.CollectionId']), and(eq(wave.key, 'final'), not(contains(convertToJson(parameters.internalConfig.prefastAndBinskimRebaselineWaves), variables['System.CollectionId'])))) }}:
                continueOnError: false
                enableAutoBaselining: true
        ${{ else }}:
          credscan_break: ${{ parameters.sdl.credscan.break }}
          policheck_break: ${{ parameters.sdl.policheck.break }}
          eslint_break: ${{ parameters.sdl.eslint.break }}
          bandit_break: ${{ parameters.sdl.bandit.break }}
          csrf_break: ${{ parameters.sdl.csrf.break }}
          psscriptanalyzer_break: ${{ parameters.sdl.psscriptanalyzer.break }}
          armory_break: ${{ parameters.sdl.armory.break }}
        isOfficial: ${{ parameters.isOfficial }}
        skipCheckout: true  # Checkout is already done in the previous steps

    - ${{ if parameters.sdl.sourceAnalysisPostSteps }}:
      - template: ../Steps/SDLPostSteps.yml
        parameters:
          steps: ${{ parameters.sdl.sourceAnalysisPostSteps }}
          condition: ne(variables['OneES_SkipSDLSourcesAnalysis'], true)
          continueOnError: false
