# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: ubuntu-latest

variables:
- name: buildConfiguration
  value: 'Release'

pr: none

# Always trigger a run when changes are made to the license test implementation or baselines
trigger: 
  branches:
    include:
    # Add comment
    - main

stages:
- stage: A
  jobs:
  - job: A1
    steps:
    - bash: |
        adir='src/arcade/artifacts/buildLogs/log/Release'
        mkdir -p $adir
        touch "$adir/Build.binlog"
        touch "$adir/ToolsetRestore.binlog"
        touch "$adir/source-inner-build.binlog"
        cdir='src/cecil/artifacts/buildLogs/log/Release'
        mkdir -p $cdir
        touch "$cdir/Build.binlog"
        touch "$cdir/ToolsetRestore.binlog"
        touch "$cdir/source-inner-build.binlog"
        ardir='artifacts/log/Release'
        mkdir -p $ardir
        touch "$ardir/Build.binlog"
      displayName: Create new file
    - bash: |
        sudo apt-get install -y rsync
        sudo apt-get clean all
      displayName: Install rsync
    - bash: |
        for dir in src/*/
        do
          echo "dir: ${dir}"
          repoName=$(basename $dir)
          echo "repo: ${repoName}"
          sdir="src/$repoName/artifacts/buildLogs/log/Release"
          echo "srcdir: ${sdir}"
          tdir="artifacts/log/Release/$repoName/Release"
          echo "artdir: ${tdir}"
          mkdir -p $tdir
          find $sdir/ -type f -name "*.binlog" -exec rsync -a {} -t $tdir \;
        done
        targetfolder=$(Build.StagingDirectory)/BuildLogs
        echo "targetfolder: ${targetfolder}"
        mkdir -p ${targetfolder}
        find artifacts/ -type f -name "*.binlog" -exec rsync -R {} -t ${targetFolder} \;
        find src/ -type f -name "*.binlog" -exec rsync -R {} -t ${targetFolder} \;
      displayName: Copy binlog files  
    - publish: '/home/vsts/work/1/s/BuildLogs'
      artifact: $(Agent.JobName)_BuildLogs_Artifact$(System.JobAttempt)
      displayName: Publish Artifacts
      continueOnError: true
