parameters:
- name: stage
  type: stage
  default: {}

- name: pool
  type: object
  default: {}

- name: containers
  type: object
  default: {}

stages:
# Insert all properties other than 'jobs'
- ${{ each pair in parameters.stage }}:
    ${{ if notIn(pair.key, 'jobs', 'pool', 'templateContext', 'dependsOn') }}:
      ${{ pair.key }}: ${{ pair.value }}

  # If a pipeline is composite and the current stage contains a release job, add a dependency on the SDLSources stage
  # Temporarily skip pipelines that have "trigger: manual" set on the stage to prevent breaking them. If condition is met, 1ESPT sets a warning in SDLSourcesTagStage.yml
  ${{ if and(eq(parameters.sdlStageRequired, true), ne(parameters.stage.trigger, 'manual')) }}:
    dependsOn:
    - ${{ if parameters.stage.dependsOn }}:
      - ${{ each dependency in parameters.stage.dependsOn }}:
        - ${{ if not(or(eq(dependency, 'SDLSources'), eq(dependency, ''))) }}:
          - ${{ dependency }}
      - SDLSources
    - ${{ else }}:
      - SDLSources
  ${{ elseif parameters.stage.dependsOn }}:
    dependsOn: ${{ parameters.stage.dependsOn }}
  ${{ if parameters.stage.pool }}:
    ${{ if startsWith(convertToJson(parameters.stage.pool), '{') }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.stage.pool.name) }}:
        'Pool "${{ parameters.stage.pool.name }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool:
        ${{ each pair in parameters.stage.pool }}:
          ${{ if notIn(pair.key, 'image', 'workspace', 'demands') }}:
            ${{ pair.key }}: ${{ pair.value }}
        ${{ if and(eq(parameters.stage.pool.os, 'macOS'), eq(parameters.stage.pool.name, 'Azure Pipelines'), parameters.stage.pool.image) }}:
          vmImage: ${{ parameters.stage.pool.image }}
        ${{ elseif or(parameters.stage.pool.image, parameters.stage.pool.workspace) }}:
          demands:
          - ${{ if parameters.stage.pool.image }}:
            - ImageOverride -equals ${{ parameters.stage.pool.image }}
          - ${{ if parameters.stage.pool.workspace }}:
            - ${{ if eq(parameters.stage.pool.os, 'linux') }}:
              - WorkFolder -equals /mnt/${{ parameters.stage.pool.workspace }}
            - ${{ else }}:
              - WorkFolder -equals C:\${{ parameters.stage.pool.workspace }}
          - ${{ if and(parameters.stage.pool.demands, not(startsWith(convertToJson(parameters.stage.pool), '['))) }}:
            - ${{ parameters.stage.pool.demands }}
          - ${{ else }}:
            - ${{ each demand in parameters.stage.pool.demands }}:
              - ${{ demand }}
        ${{ elseif parameters.stage.pool.demands }}:
          demands: ${{ parameters.stage.pool.demands }}
    ${{ else }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.stage.pool) }}:
        'Pool "${{ parameters.stage.pool }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool: ${{ parameters.stage.pool }}

  # The same as before, but for the case the pool is passed as a pipeline parameter
  ${{ elseif ne(length(parameters.pool), 0) }}:
    ${{ if startsWith(convertToJson(parameters.pool), '{') }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.pool.name) }}:
        'Pool "${{ parameters.pool.name }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool:
        ${{ each pair in parameters.pool }}:
          ${{ if notIn(pair.key, 'image', 'workspace', 'demands') }}:
            ${{ pair.key }}: ${{ pair.value }}
        ${{ if and(eq(parameters.pool.os, 'macOS'), eq(parameters.pool.name, 'Azure Pipelines'), parameters.pool.image) }}:
          vmImage: ${{ parameters.pool.image }}
        ${{ elseif or(parameters.pool.image, parameters.pool.workspace) }}:
          demands:
          - ${{ if parameters.pool.image }}:
            - ImageOverride -equals ${{ parameters.pool.image }}
          - ${{ if parameters.pool.workspace }}:
            - ${{ if eq(parameters.pool.os, 'linux') }}:
              - WorkFolder -equals /mnt/${{ parameters.pool.workspace }}
            - ${{ else }}:
              - WorkFolder -equals C:\${{ parameters.pool.workspace }}
          - ${{ if and(parameters.pool.demands, not(startsWith(convertToJson(parameters.pool), '['))) }}:
            - ${{ parameters.pool.demands }}
          - ${{ else }}:
            - ${{ each demand in parameters.pool.demands }}:
              - ${{ demand }}
        ${{ elseif parameters.pool.demands }}:
          demands: ${{ parameters.pool.demands }}
    ${{ else }}:
      ${{ if containsValue(parameters.internalConfig.disallowedPools, parameters.pool) }}:
        'Pool "${{ parameters.pool }}" is not an allowed pool, please use your own 1ES Hosted Pool': error
      pool: ${{ parameters.pool }}


  jobs:

  - ${{ each job in parameters.stage.jobs }}:
    - template: ../Jobs/Job.yml
      parameters:
        job: ${{ job }}
        stage: ${{ parameters.stage }}

################# Container set inside job ############################################################
        ${{ if job.container }}:
          ${{ if job.container.alias }}:
            # Skip container definition if container is set to host
            ${{ if ne(job.container.alias, 'host') }}:
              container:
                ${{ if parameters.containers[job.container.alias] }}:
                  ${{ each pair in parameters.containers[job.container.alias] }}:
                    ${{ if ne(pair.key, 'name') }}:
                      ${{ pair.key }}: ${{ pair.value }}
                  name: ${{ job.container.alias }}
                ${{ else }}:
                  'Container ${{ job.container.alias }} is not defined. Add container definition to "container" parameter of template.': error
          ${{ else }}:
            'Job container value is not supported': error

################# Container is determined by pool operating system ############################################################
        ${{ else }}:
          ${{ if eq(coalesce(job.pool.os, parameters.stage.pool.os, parameters.pool.os, 'windows'), 'windows') }}:
            ${{ if parameters.containers.default_windows_container.image }}:
              container:
                ${{ each pair in parameters.containers.default_windows_container }}:
                  ${{ if ne(pair.key, 'name') }}:
                    ${{ pair.key }}: ${{ pair.value }}
                name: default_windows_container
          ${{ elseif eq(coalesce(job.pool.os, parameters.stage.pool.os, parameters.pool.os), 'linux') }}:
            ${{ if parameters.containers.default_linux_container.image }}:
              container:
                ${{ each pair in parameters.containers.default_linux_container }}:
                  ${{ if ne(pair.key, 'name') }}:
                    ${{ pair.key }}: ${{ pair.value }}
                name: default_linux_container

        pool:
          name: ${{ coalesce(job.pool.name, parameters.stage.pool.name, parameters.pool.name) }}
          os: ${{ coalesce(job.pool.os, parameters.stage.pool.os, parameters.pool.os, 'windows') }}
          hostArchitecture: ${{ coalesce(job.pool.hostArchitecture, parameters.stage.pool.hostArchitecture, parameters.pool.hostArchitecture, 'amd64') }}
          pipelinePool:
            name: ${{ parameters.pool.name }}
            os: ${{ coalesce( parameters.pool.os, 'windows' ) }}
            hostArchitecture: ${{ coalesce( parameters.pool.hostArchitecture, 'amd64') }}
